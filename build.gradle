plugins {
    id 'java'
    id 'checkstyle'
    id 'jacoco'
    id 'maven-publish'
    id 'signing'
    id 'com.vanniktech.maven.publish' version '0.32.0'
}

group = 'io.github.panghy'
version = '1.2.0-SNAPSHOT'

repositories {
    mavenCentral()
}

// Configure for Java 21 compatibility
sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

checkstyle {
    toolVersion = '10.12.5'
    configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    // Don't allow any checkstyle warnings
    maxWarnings = 0
    ignoreFailures = false
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.mockito:mockito-core:5.17.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.17.0'
    testImplementation("org.assertj:assertj-core:3.27.3")
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport

    // Add JVM arguments for Continuation API access
    jvmArgs += [
            '--add-exports', 'java.base/jdk.internal.vm=ALL-UNNAMED',
            '--add-opens', 'java.base/jdk.internal.vm=ALL-UNNAMED',
            '--add-opens', 'jdk.unsupported/sun.misc=ALL-UNNAMED'
    ]
}

check.dependsOn jacocoTestCoverageVerification

jacoco {
    toolVersion = "0.8.13" // Latest version
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/LoggingUtil*',
                    '**/FastByteComparisons*',
                    '**/FlowRpcTransportImpl$RemoteInvocationHandler*',
                    '**/FlowRpcTransportImpl$1*'
            ])
        }))
    }
    dependsOn test
}

jacocoTestCoverageVerification {
    // Apply same exclusions as in the report task
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/LoggingUtil*',
                    '**/FastByteComparisons*',
                    '**/FlowRpcTransportImpl$RemoteInvocationHandler*',
                    '**/FlowRpcTransportImpl$1*'
            ])
        }))
    }

    violationRules {
        rule {
            element = 'CLASS'
            // These exclusions are only checked if afterEvaluate failed to exclude
            excludes = [
                    '**/LoggingUtil*',
                    'io.github.panghy.javaflow.util.LoggingUtil',
                    'io/github/panghy/javaflow/util/LoggingUtil*',
                    '**/FastByteComparisons*',
                    'io.github.panghy.javaflow.util.FastByteComparisons*',
                    'io/github/panghy/javaflow/util/FastByteComparisons*',
                    '**/FlowRpcTransportImpl$RemoteInvocationHandler*',
                    'io.github.panghy.javaflow.rpc.FlowRpcTransportImpl$RemoteInvocationHandler',
                    'io/github/panghy/javaflow/rpc/FlowRpcTransportImpl$RemoteInvocationHandler*',
                    '**/FlowRpcTransportImpl$1*',
                    'io.github.panghy.javaflow.rpc.FlowRpcTransportImpl$1',
                    'io/github/panghy/javaflow/rpc/FlowRpcTransportImpl$1*',
            ]

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.85 // 85% line coverage for all classes
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.75 // 75% branch coverage for all classes
            }
        }
    }
    dependsOn jacocoTestReport
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-Xlint:unchecked', '-Xlint:deprecation']
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = true
        html.required = true
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += [
            '--add-exports', 'java.base/jdk.internal.vm=ALL-UNNAMED'
    ]
}

java {
    withSourcesJar()
}

ext {
    // Configure POM for Maven Central
    pomConfig = {
        name = 'JavaFlow'
        description = 'A Java library for actor-based concurrency with JDK continuations'
        url = 'https://github.com/panghy/javaflow'

        licenses {
            license {
                name = 'The Apache License, Version 2.0'
                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
        }

        developers {
            developer {
                id = 'panghy'
                name = 'Clement Pang'
            }
        }

        scm {
            connection = 'scm:git:git://github.com/panghy/javaflow.git'
            developerConnection = 'scm:git:ssh://github.com/panghy/javaflow.git'
            url = 'https://github.com/panghy/javaflow'
        }
    }
}

import com.vanniktech.maven.publish.JavaLibrary
import com.vanniktech.maven.publish.JavadocJar
import com.vanniktech.maven.publish.SonatypeHost

mavenPublishing {
    configure(new JavaLibrary(new JavadocJar.Empty(), true))
    publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL)
    signAllPublications()
    pom(pomConfig)

    // Configure credentials from environment variables or Gradle properties
    coordinates("io.github.panghy", "javaflow", version)
}