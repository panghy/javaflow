plugins {
    id 'java'
    id 'checkstyle'
    id 'jacoco'
}

group = 'io.github.panghy'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

// Configure for Java 21 compatibility
sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

checkstyle {
    toolVersion = '10.12.5'
    configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    // Don't allow any checkstyle warnings
    maxWarnings = 0
    ignoreFailures = false
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.mockito:mockito-core:5.11.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.11.0'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport

    // Add JVM arguments for Continuation API access
    jvmArgs += [
            '--add-exports', 'java.base/jdk.internal.vm=ALL-UNNAMED',
            '--add-opens', 'java.base/jdk.internal.vm=ALL-UNNAMED'
    ]
}

check.dependsOn jacocoTestCoverageVerification

jacoco {
    toolVersion = "0.8.13" // Latest version
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/LoggingUtil*',
                '**/Flow.class',
                '**/FlowFuture.class'
            ])
        }))
    }
    dependsOn test
}

jacocoTestCoverageVerification {
    // Apply same exclusions as in the report task
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/LoggingUtil*',
            ])
        }))
    }
    
    violationRules {
        rule {
            element = 'CLASS'
            // These exclusions are only checked if afterEvaluate failed to exclude
            excludes = [
                '**/LoggingUtil*',
                'io.github.panghy.javaflow.util.LoggingUtil',
                'io/github/panghy/javaflow/util/LoggingUtil*',
            ]

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.85 // 85% line coverage for all classes
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.75 // 75% branch coverage for all classes
            }
        }
    }
    dependsOn jacocoTestReport
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-Xlint:unchecked', '-Xlint:deprecation']
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = true
        html.required = true
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += [
            '--add-exports', 'java.base/jdk.internal.vm=ALL-UNNAMED'
    ]
}