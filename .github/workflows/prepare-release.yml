name: Prepare Release

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
      next_version:
        description: 'Next development version (e.g., 1.1.0-SNAPSHOT)'
        required: true

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Configure Git and Authentication
        run: |
          # Debug: Check if token is available
          if [ -z "${{ secrets.RELEASE_TOKEN }}" ]; then
            echo "ERROR: RELEASE_TOKEN is not set!"
            exit 1
          fi
          # Set the remote URL to use the token
          git remote set-url origin https://x-access-token:${{ secrets.RELEASE_TOKEN }}@github.com/${{ github.repository }}.git
          # Verify the remote URL is set
          echo "Remote URL configured successfully"
          # Test authentication with a simple fetch
          git fetch origin || echo "WARNING: Fetch failed"
          # Configure git user
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Update to release version
        run: |
          RELEASE_VERSION="${{ github.event.inputs.release_version }}"
          sed -i "s/version = '.*'/version = '$RELEASE_VERSION'/g" build.gradle
          echo "Updated build.gradle to release version $RELEASE_VERSION"

      - name: Build and test with release version
        run: ./gradlew clean build

      - name: Commit release version
        run: |
          git add build.gradle
          git commit -m "chore: prepare release ${{ github.event.inputs.release_version }}"

      - name: Update to next development version
        run: |
          NEXT_VERSION="${{ github.event.inputs.next_version }}"
          sed -i "s/version = '.*'/version = '$NEXT_VERSION'/g" build.gradle
          echo "Updated build.gradle to next development version $NEXT_VERSION"

      - name: Commit next development version
        run: |
          git add build.gradle
          git commit -m "chore: prepare for next development version ${{ github.event.inputs.next_version }}"

      - name: Create and push release branch
        run: |
          BRANCH_NAME="release/${{ github.event.inputs.release_version }}"
          # Delete the branch if it already exists (from a previous failed run)
          git push origin --delete "$BRANCH_NAME" || true
          git checkout -b "$BRANCH_NAME"
          git push -u origin "$BRANCH_NAME"

      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          gh pr create \
            --title "Release: ${{ github.event.inputs.release_version }}" \
            --body "## Release ${{ github.event.inputs.release_version }}
            
            This PR prepares the release for version ${{ github.event.inputs.release_version }} and sets up the next development version ${{ github.event.inputs.next_version }}.
            
            ### Changes
            - Update version to ${{ github.event.inputs.release_version }}
            - Update version to next development version ${{ github.event.inputs.next_version }}
            
            Once this PR is merged, a tag \`v${{ github.event.inputs.release_version }}\` will be created automatically and a GitHub release will be published."