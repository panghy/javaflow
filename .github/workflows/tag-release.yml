name: Tag and Release

on:
  pull_request:
    types:
      - closed

jobs:
  tag-release:
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'release')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Extract version from PR title
        id: extract_version
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          VERSION=$(echo "$PR_TITLE" | sed -n 's/Release: \(.*\)/\1/p')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Read current version from build.gradle
        id: read_version
        run: |
          CURRENT_VERSION=$(grep "version = " build.gradle | sed -n "s/version = '\(.*\)'/\1/p")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version in build.gradle: $CURRENT_VERSION"

      - name: Find release commit
        id: find_commit
        run: |
          RELEASE_VERSION="${{ steps.extract_version.outputs.version }}"
          # Find the commit that updated to the release version
          RELEASE_COMMIT=$(git log --format="%H %s" -n 50 | grep "chore: prepare release $RELEASE_VERSION" | cut -d' ' -f1)
          if [ -z "$RELEASE_COMMIT" ]; then
            echo "Could not find release commit for version $RELEASE_VERSION"
            exit 1
          fi
          echo "commit=$RELEASE_COMMIT" >> $GITHUB_OUTPUT
          echo "Found release commit: $RELEASE_COMMIT"

      - name: Create release tag
        run: |
          RELEASE_VERSION="${{ steps.extract_version.outputs.version }}"
          RELEASE_COMMIT="${{ steps.find_commit.outputs.commit }}"
          git tag -a "v$RELEASE_VERSION" "$RELEASE_COMMIT" -m "Release $RELEASE_VERSION"
          git push origin "v$RELEASE_VERSION"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.extract_version.outputs.version }}
          name: Release ${{ steps.extract_version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true